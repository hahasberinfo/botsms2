# -*- coding: utf-8 -*-
import telebot
import datetime
from telebot import types, apihelper
import sqlite3
import config
import random
import time
import json
import light_qiwi
from light_qiwi import Qiwi, OperationType
import keyboards
import requests
# BOT
import sys
from twilio.rest import Client
# noinspection PyUnresolvedReferences
from urllib.parse import urlencode, urlparse, urljoin, urlunparse, parse_qs
# Your Account SID from twilio.com/console

clck_url = 'https://clck.ru/--?url='
clck_url_2 = 'https://uni.su/api/?url='
clck_url_3 = 'https://is.gd/create.php?format=simple&url='
clck_url_4 = 'https://v.gd/create.php?format=simple&url='

# Your Account SID from twilio.com/console
account_sid = config.twilio_account_sid
# Your Auth Token from twilio.com/console
auth_token  = config.twilio_auth_token
client = Client(account_sid, auth_token)

ngrok = config.ngrok

bot = telebot.TeleBot(config.bot_token)

bot2 = telebot.TeleBot(config.gamebot_token)


@bot.message_handler(commands=['start'])
def start_message(message):
	userid = str(message.chat.id)
	username = str(message.from_user.username)
	connection = sqlite3.connect('database.sqlite')
	q = connection.cursor()
	q = q.execute('SELECT * FROM ugc_users WHERE id IS '+str(userid))
	row = q.fetchone()
	if row is None:
		q.execute("INSERT INTO ugc_users (id,name,balans,ref,ref_colvo,rules) VALUES ('%s', '%s', '%s', '%s', '%s', '%s')"%(userid,username,'0','0','0','20'))
		connection.commit()
		if message.text[7:] != '':
			if message.text[7:] != userid:
				q.execute("update ugc_users set ref = " + str(message.text[7:])+ " where id = " + str(userid))
				connection.commit()
				q.execute("update ugc_users set ref_colvo =ref_colvo + 1 where id = " + str(message.text[7:]))
				connection.commit()
				bot.send_message(message.text[7:], f'–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! <a href="tg://user?id={message.chat.id}">{message.chat.first_name}</a>',parse_mode='HTML')
		msg = bot.send_message(message.chat.id,f'üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <a href="tg://user?id={message.chat.id}">{message.chat.first_name}</a>',parse_mode='HTML', reply_markup=keyboards.main)
	else:
		if row[3] == '0':
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			q.execute("SELECT * FROM reklama")
			row = q.fetchall()
			text = ''
			keyboard = types.InlineKeyboardMarkup()
			for i in row:
				text = f'{text}<a href="{i[2]}">{i[1]}</a>\n‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ\n'
			keyboard.add(types.InlineKeyboardButton(text='üí∞ –ö—É–ø–∏—Ç—å —Å—Å—ã–ª–∫—É',callback_data='buy_reklama'))
			bot.send_message(message.chat.id, f'''<b>üíé –†–µ–∫–ª–∞–º–∞:</b>

{text}
''' ,parse_mode='HTML', reply_markup=keyboard,disable_web_page_preview = True)
			bot.send_message(message.chat.id,f'üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <a href="tg://user?id={message.chat.id}">{message.chat.first_name}</a>',parse_mode='HTML', reply_markup=keyboards.main)
		else:
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			q.execute("SELECT * FROM reklama")
			row = q.fetchall()
			text = ''
			keyboard = types.InlineKeyboardMarkup()
			for i in row:
				text = f'{text}<a href="{i[2]}">{i[1]}</a>\n‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ\n'
			keyboard.add(types.InlineKeyboardButton(text='üí∞ –ö—É–ø–∏—Ç—å —Å—Å—ã–ª–∫—É',callback_data='buy_reklama'))
			bot.send_message(message.chat.id, f'''<b>üíé –†–µ–∫–ª–∞–º–∞:</b>

{text}
''' ,parse_mode='HTML', reply_markup=keyboard,disable_web_page_preview = True)
			bot.send_message(message.chat.id,f'üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <a href="tg://user?id={message.chat.id}">{message.chat.first_name}</a>',parse_mode='HTML', reply_markup=keyboards.main)

@bot.message_handler(content_types=['text'])
def send_text(message):

	if message.text.lower() == '/admin':
		if message.chat.id == config.admin:
			msg = bot.send_message(message.chat.id, '<b>–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!</b>',parse_mode='HTML', reply_markup=keyboards.admin)
	elif message.text.lower() == '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ':
		if message.chat.id == config.admin:
			msg = bot.send_message(message.chat.id, '<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ:\n\n–°–µ—Ä–≤–∏—Å\n\n–¢–µ–∫—Å—Ç —Å–º—Å</b>\n\n<i>–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤:</i> <code>avito</code>,<code>avito_2</code>,<code>youla</code>,<code>youla_2</code>,<code>tk</code>,<code>tk_2</code>,',parse_mode='HTML',reply_markup=keyboards.otmena)
			bot.register_next_step_handler(msg, new_nametovars)

	elif message.text.lower() == '—É–¥–∞–ª–µ–Ω–∏–µ':
		if message.chat.id == config.admin:
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			q.execute("SELECT * FROM sms")
			row = q.fetchall()
			q.close()
			text = ''
			for i in row:
				text = f'{text}id: <code>{i[0]}</code>| –¢–µ–∫—Å—Ç —Å–æ–æ–±—à–µ–Ω–∏—è: <code>{i[2]}</code>\n'
			msg = bot.send_message(message.chat.id, f'<b>–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n<i>–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤:</i>\n{text}',parse_mode='HTML',reply_markup=keyboards.otmena)
			bot.register_next_step_handler(msg, del_sms)

	elif message.text.lower() == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
		if message.chat.id == config.admin:
			msg = bot.send_message(message.chat.id, '<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>',parse_mode='HTML', reply_markup=keyboards.settings)

	elif message.text.lower() == '–¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å':
		if message.chat.id == config.admin:
			msg = bot.send_message(message.chat.id, '<b>–í–≤–µ–¥–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>',parse_mode='HTML', reply_markup=keyboards.otmena)
			bot.register_next_step_handler(msg, add_money1)

	elif message.text.lower() == '–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–π—Å':
		if message.chat.id == config.admin:
			msg = bot.send_message(message.chat.id, '<b>–í–≤–µ–¥–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>',parse_mode='HTML', reply_markup=keyboards.otmena)
			bot.register_next_step_handler(msg, edit_prace)


	elif message.text.lower() == '—Å–Ω—è—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞':
		if message.chat.id == config.admin:
			msg = bot.send_message(message.chat.id, '<b>–í–≤–µ–¥–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>',parse_mode='HTML', reply_markup=keyboards.otmena)
			bot.register_next_step_handler(msg, remove_money1)

	elif message.text.lower() == '–∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä':
		if message.chat.id == config.admin:
			msg = bot.send_message(message.chat.id, '<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä</b>',parse_mode='HTML', reply_markup=keyboards.otmena)
			bot.register_next_step_handler(msg, new_phone)

	elif message.text.lower() == '–∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏':
		if message.chat.id == config.admin:
			msg = bot.send_message(message.chat.id, '<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä</b>',parse_mode='HTML', reply_markup=keyboards.otmena)
			bot.register_next_step_handler(msg, new_numer)

	elif message.text.lower() == '–∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω':
		if message.chat.id == config.admin:
			msg = bot.send_message(message.chat.id, '<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω</b>',parse_mode='HTML', reply_markup=keyboards.otmena)
			bot.register_next_step_handler(msg, new_token)




	elif message.text.lower() == 'üåé –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
		if message.chat.id == config.admin:
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			now = datetime.datetime.now()
			tt = now.strftime('%d.%m.%Y')
			ttm = now.strftime('%m.%Y')
			# –•—É–π–Ω—è –±–µ—Ä—É—â–∞—è—Å—è –∏–∑ –±–∞–∑—ã: –∫–æ–ª-–≤–æ, —Å—É–º–º—ã
			count_users= q.execute(f"SELECT count(id) from ugc_users").fetchone()[0]
			count_buys_segodna = q.execute(f"SELECT count(id) from ugc_buys WHERE date LIKE '%{tt}%'").fetchone()[0]
			count_earn_segodna = q.execute(f"SELECT sum(price) from ugc_buys WHERE date LIKE '%{tt}%'").fetchone()[0]
			count_buys_month = q.execute(f"SELECT count(id) from ugc_buys WHERE date LIKE '%{ttm}%'").fetchone()[0]
			count_earn_month = q.execute(f"SELECT sum(price) from ugc_buys WHERE date LIKE '%{ttm}%'").fetchone()[0]
			vsego = q.execute(f"SELECT count(id) from ugc_buys").fetchone()
			summ = q.execute(f"SELECT sum(price) from ugc_buys").fetchone()
			q.execute("SELECT balans_user FROM statistika  where id = "+str(1))
			balans_user = q.fetchone()
			q.execute("SELECT balans_service FROM statistika  where id = "+str(1))
			balans_service = q.fetchone()
			q.execute("SELECT sms_send FROM statistika  where id = "+str(1))
			sms_send = q.fetchone()
			q.execute("SELECT sms_good FROM statistika  where id = "+str(1))
			sms_good = q.fetchone()
			wwwwwwwwwwwwad = float(balans_user[0]) / float(10)
			awdawdawdawfffff = float(balans_service[0]) / float(0.04)
			bot.send_message(message.chat.id, f'''<i>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i> <code>{count_users}</code>

<b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ</b>

<i>‚Ä¢ C–µ–≥–æ–¥–Ω—è:</i> <code>{'0' if count_earn_segodna==None else count_earn_segodna }</code> —Ä—É–± | <code>{count_buys_segodna}</code> —à—Ç
<i>‚Ä¢ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:</i> <code>{'0' if count_earn_month==None else count_earn_month}</code> —Ä—É–± | <code>{count_buys_month}</code> —à—Ç
<i>‚Ä¢ –í—Å–µ–≥–æ:</i> <code>{summ[0]}</code> —Ä—É–± | <code>{vsego[0]}</code> —à—Ç

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º—Å</b>
<i>‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ —Å–º—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</i> <code>{wwwwwwwwwwwwad}</code>
<i>‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ:</i> <code>{sms_send[0]}</code> | <code>{sms_good[0]}</code> —à—Ç
<i>‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞ —Å–µ—Ä–≤–∏—Å–∞:</i> <code>{balans_service[0]}</code> | <code>{awdawdawdawfffff}</code> —à—Ç
''',parse_mode='HTML')
			q.close()
			connection.close()

	elif message.text.lower() == '—Ä–∞—Å—Å—ã–ª–∫–∞':
		if message.chat.id == config.admin:
			msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
			bot.register_next_step_handler(msg, send_photoorno)

	elif message.text.lower() == '–∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É':
		if message.chat.id == config.admin:
			msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id')
			bot.register_next_step_handler(msg, new_prace)

	elif message.text.lower() == '/balance':
		if message.chat.id == config.admin:
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			q.execute(f"select sum(balans) from ugc_users")
			wdadwawd = q.fetchone()
			print(wdadwawd)

	elif message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute(f"SELECT * FROM sms_temp where id = '{message.chat.id}'")
		status = q.fetchone()
		if status != None:
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			q.execute('DELETE FROM sms_temp WHERE id = '+ str(message.chat.id))
			connection.commit()
			bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é',reply_markup=keyboards.main)
		else:
			bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é',reply_markup=keyboards.main)


	elif message.text.lower() == 'üì§ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ':
		try:
			if 'member' == bot2.get_chat_member(chat_id=config.subid, user_id=message.chat.id).status:
				print('yes_chat')
				connection = sqlite3.connect('database.sqlite')
				q = connection.cursor()
				q.execute("SELECT rules FROM ugc_users  where id = "+str(message.chat.id))
				sms_prace = q.fetchone()
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(text=f'–°–≤–æ–π —Ç–µ–∫—Å—Ç | {sms_prace[0]}—Ä',callback_data='svoi_text'),types.InlineKeyboardButton(text=f'–®–∞–±–ª–æ–Ω—ã | {sms_prace[0]}—Ä',callback_data='—à–∞–±–ª–æ–Ω—ã'))
				#keyboard.add(types.InlineKeyboardButton(text=f'‚úÇÔ∏è –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É',callback_data='—Å–æ–∫—Ä–∞—Ç–∏—Ç—å_—Å—Å—ã–ª–∫—É'))
				keyboard.add(types.InlineKeyboardButton(text=f'‚ôªÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ',callback_data='edit_praces'),types.InlineKeyboardButton(text=f'‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',callback_data='–Ω–∏—Å—Ç—Ä–æ–∏–∫–∏'))

				bot.send_message(message.chat.id, f'‚ÑπÔ∏è –û—Ç–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ ? \n\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–º—Å: {sms_prace[0]}—Ä (–ª—é–±–æ–π —Å–µ—Ä–≤–∏—Å)' ,parse_mode='HTML', reply_markup=keyboard)

			else:
				print('no_chat')
				podpiska = types.InlineKeyboardMarkup()
				podpiska.add(types.InlineKeyboardButton(text='‚úÖ –í—Å—Ç—É–ø–∏—Ç—å',url='https://t.me/smska_news'))
				bot.send_message(message.chat.id,'<b>üîë –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—à–µ–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å <a href="https://t.me/smska_news">–≤ –Ω–∞—à –∫–∞–Ω–∞–ª</a>!\n\n‚ö†Ô∏è –ü–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è </b>', parse_mode='HTML', reply_markup=podpiska,disable_web_page_preview = True)
		except:
				print('no_chat_3')
				podpiska = types.InlineKeyboardMarkup()
				podpiska.add(types.InlineKeyboardButton(text='‚úÖ –í—Å—Ç—É–ø–∏—Ç—å',url='https://t.me/smska_news'))
				bot.send_message(message.chat.id,'<b>üîë –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—à–µ–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å <a href="https://t.me/smska_news">–≤ –Ω–∞—à –∫–∞–Ω–∞–ª</a>!\n\n‚ö†Ô∏è –ü–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è </b>', parse_mode='HTML', reply_markup=podpiska,disable_web_page_preview = True)

	elif message.text.lower() == 'üìú –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("SELECT sms_send FROM statistika  where id = "+str(1))
		sms_send = q.fetchone()
		q.execute("SELECT sms_good FROM statistika  where id = "+str(1))
		sms_good = q.fetchone()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='üßë‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞',url='https://t.me/SMSKA_SUPPORT'))
		keyboard.add(types.InlineKeyboardButton(text='üóØ –ß–∞—Ç',url='https://t.me/joinchat/RFqxdRzYx4QD2G8Wr8J09A'))
		bot.send_message(message.chat.id, f'''<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

‚ûñ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ:</b> <code>{sms_send[0]} </code>
‚ûñ <b>–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</b> <code>{sms_good[0]} </code>
''' ,parse_mode='HTML', reply_markup=keyboard)


	elif message.text.lower() == '—Ñ—Ü–≤—Ñ—Ü–≤—Ñ—Ü–≤	':
		local = client.available_phone_numbers('US').local.list(limit=1)

		for record in local:
			print(record.friendly_name)
			local = record.friendly_name
# local = client.available-phone_nubmers('US').local.list(limit=20)



			text = local.replace('(','').replace(')','').replace(' ','').replace('-', '')
			print(text)
			phone = f'+1{text}'
			print(phone)
			incoming_phone_number = client.incoming_phone_numbers \
                      .create(phone_number=f'{phone}')
			connection = sqlite3.connect('database.sqlite', uri=True, check_same_thread=False)
			q = connection.cursor()
			q.execute(f"SELECT numbers FROM port where id = {message.chat.id}")
			check_phone = q.fetchone()
			if check_phone == None:
				q.execute("INSERT INTO port (id,numbers) VALUES ('%s','%s')"%(message.chat.id,str(phone)))
				connection.commit()
			else:
				q.execute(f"update port set numbers = '{phone}' where id = '{message.chat.id}'")
				connection.commit()

			print(incoming_phone_number.sid)
	elif message.text.lower() == '—ã—ã—ã—ã—ã—ã—ã':
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='üéÅ –í–∞—É—á–µ—Ä—ã',callback_data='igra_ticet'))
		bot.send_message(message.chat.id, '<b>–í–≤–µ–¥–∏—Ç–µ id —Å–æ–æ–±—â–µ–Ω–∏—è:</b>',parse_mode='HTML', reply_markup=keyboard)


	elif message.text.lower() == 'üñ• –∫–∞–±–∏–Ω–µ—Ç':
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("SELECT balans FROM ugc_users where id is " + str(message.chat.id))
		balanss = q.fetchone()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='‚öúÔ∏è –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',callback_data='awhat_oplata'))
		keyboard.add(types.InlineKeyboardButton(text='üéÅ –í–∞—É—á–µ—Ä—ã',callback_data='vau'))
		q.execute("SELECT ref_colvo FROM ugc_users where id = " + str(message.chat.id))
		ref_colvoo = q.fetchone()
		bot.send_message(message.chat.id, '<b>üßü‚Äç‚ôÇ id: '+str(message.chat.id)+'\n \nüí∞ –ë–∞–ª–∞–Ω—Å:</b> ' + str(balanss[0]) + '\n \nüë•–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n \n‚ñ´Ô∏è–ß—Ç–æ —ç—Ç–æ?\n–ù–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä—É–ø–Ω—É—é —Å—É–º–º—É –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏—à—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ 5% –æ—Ç –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –≤ –±–æ—Ç–µ  \n \nüìØ–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \nhttps://t.me/'+str(config.bot_name)+'?start='+str(message.chat.id)+'\n\n<b>–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>:  ' + str(ref_colvoo[0]),parse_mode='HTML', reply_markup=keyboard,disable_web_page_preview = True)

	elif message.text.lower() == '–Ω–∞–∑–∞–¥':
		msg = bot.send_message(message.chat.id, '<b>–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥</b>',parse_mode='HTML', reply_markup=keyboards.main)

def new_stata(message):
	new_stata = message.text
	if new_stata != '–û—Ç–º–µ–Ω–∞':
		try:
			if new_stata.split('\n\n')[0].lower() != '–Ω–µ—Ç':
				connection = sqlite3.connect('database.sqlite')
				q = connection.cursor()

				a=message.text.split('\n\n')[0]
				q.execute(f"update statistika set name = '{a}' where id = '1'")
				connection.commit()


			if new_stata.split('\n\n')[1].lower() != '–Ω–µ—Ç':
				connection = sqlite3.connect('database.sqlite')
				q = connection.cursor()
				b=message.text.split('\n\n')[1]
				q.execute(f"update statistika set text = '{b}' where id = '1'")
				connection.commit()

			if new_stata.split('\n\n')[2].lower() != '–Ω–µ—Ç':
				connection = sqlite3.connect('database.sqlite')
				q = connection.cursor()
				bb=message.text.split('\n\n')[2]
				q.execute(f"update statistika set text = '{bb}' where id = '1'")
				connection.commit()

			if new_stata.split('\n\n')[3].lower() != '–Ω–µ—Ç':
				connection = sqlite3.connect('database.sqlite')
				q = connection.cursor()
				bbb=message.text.split('\n\n')[3]
				q.execute(f"update statistika set text = '{bbb}' where id = '1'")
				connection.commit()
			connection.close()

			bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ!',parse_mode='HTML', reply_markup=keyboards.admin)
		except:
			bot.send_message(message.chat.id, '–ê—Ä–≥—É–º–µ–Ω—Ç—ã —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ!',parse_mode='HTML', reply_markup=keyboards.admin)
	else:
		hideBoard = types.ReplyKeyboardRemove()
		bot.send_message(message.chat.id, "‚ö†Ô∏è –û—Ç–º–µ–Ω–∏–ª–∏" , reply_markup=hideBoard)
		bot.send_message(message.chat.id, "‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫ –º–µ–Ω—é:",parse_mode='HTML', reply_markup=keyboards.admin)
def vau_add(message):
	if message.text != '–û—Ç–º–µ–Ω–∞':
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		if message.text.isdigit() == True:
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			q = q.execute("SELECT balans FROM ugc_users WHERE id = "+str(message.chat.id))
			check_balans = q.fetchone()
			if float(check_balans[0]) >= int(message.text):
					colvo = 1
					dlina = 10
					chars = 'abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
					for ttt in range(1):
						for n in range(10):
							id_sdelka =''
						for i in range(int(dlina)):
							id_sdelka += random.choice(chars)
					print(id_sdelka)
					q.execute("update ugc_users set balans = balans - "+str(message.text)+" where id = " + str(message.chat.id))
					connection.commit()
					q.execute("INSERT INTO vau (name,summa,adds) VALUES ('%s', '%s', '%s')"%(id_sdelka,message.text,message.chat.id))
					connection.commit()
					bot.send_message(message.chat.id, f'''üéÅ –í–∞—É—á–µ—Ä <code>{id_sdelka}</code>, —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.''',reply_markup=keyboards.main, parse_mode='HTML')
					q.close()
					connection.close()
			else:
				msg = bot.send_message(message.chat.id, '‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')

		else:
			msg = bot.send_message(message.chat.id, '‚ö† –û—à–∏–±–∫–∞!')
	else:
		bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é',reply_markup=keyboards.main)


def vau_good(message):
	if message.text != '–û—Ç–º–µ–Ω–∞':
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute(f"SELECT * FROM vau where name = '{message.text}'")
		status = q.fetchone()
		if status != None:
			print("yes")
			q.execute(f"SELECT summa FROM vau where name = '{message.text}'")
			summa = q.fetchone()
			q.execute(f"SELECT adds FROM vau where name = '{message.text}'")
			adds = q.fetchone()
			q.execute("update ugc_users set balans = balans + "+str(summa[0])+" where id = " + str(message.chat.id))
			connection.commit()
			print(summa[0])
			q.execute(f"DELETE FROM vau WHERE name = '{message.text}'")
			connection.commit()
			bot.send_message(message.chat.id, f'''üéÅ –í–∞—É—á–µ—Ä <code>{message.text}</code>, —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <code>{summa[0]}</code> RUB. ''',reply_markup=keyboards.main, parse_mode='HTML')
			bot.send_message(adds[0], f'''üë§  <a href="tg://user?id={message.chat.id}">{message.chat.first_name}</a>  –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª(–∞) –≤–∞—É—á–µ—Ä <code>{message.text}</code>.''',reply_markup=keyboards.main, parse_mode='HTML')

		else:
			bot.send_message(message.chat.id, f'''üéÅ –í–∞—É—á–µ—Ä <code>{message.text}</code>, –Ω–µ —Å—É—à–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.''',reply_markup=keyboards.main, parse_mode='HTML')
	else:
		bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é',reply_markup=keyboards.main)

def generator_url(message):
   try:
      if "https://" in str(message.text):
         text = ''
         r = requests.get(f"{clck_url}{message.text}")
         r2 = requests.get(f"{clck_url_2}{message.text}")
         r3 = requests.get(f"{clck_url_3}{message.text}")
         r4 = requests.get(f"{clck_url_4}{message.text}")
         text = f"{text}{r.text}\n{text}{r2.text}\n{text}{r3.text}\n{text}{r4.text}"
         bot.send_message(message.chat.id, f'‚öí –í–∞—à–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n{text}',parse_mode='HTML', reply_markup=keyboards.main)
      else:
         bot.send_message(message.chat.id, f'‚öí –°—Å—ã–ª–∫–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ!',parse_mode='HTML', reply_markup=keyboards.main)

   except:
      bot.send_message(message.chat.id, f'‚öí –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!',parse_mode='HTML', reply_markup=keyboards.main)

def del_sms(message):
	new_categggg = message.text
	if new_categggg != '–û—Ç–º–µ–Ω–∞':
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute(f'DELETE FROM sms WHERE id = ' + str(new_categggg))
		connection.commit()
		bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ!',parse_mode='HTML', reply_markup=keyboards.admin)
	else:
		bot.send_message(message.chat.id, "‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫ –º–µ–Ω—é:",parse_mode='HTML', reply_markup=keyboards.admin)

def status_sms(message):
	new_categggg = message.text
	if new_categggg != '–û—Ç–º–µ–Ω–∞':
		feedback = client.messages(f'{new_categggg}') \
                 .feedback \
                 .create()

		print(feedback)
	else:
		bot.send_message(message.chat.id, "‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫ –º–µ–Ω—é:",parse_mode='HTML', reply_markup=keyboards.admin)

def yes_buy_reklama(message):
	global name_link_reklama
	name_link_reklama = message.text
	if name_link_reklama != '–û—Ç–º–µ–Ω–∞':
		msg = bot.send_message(message.chat.id, '<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–±—å—è–≤–ª–µ–Ω–∏—è:</b>',parse_mode='HTML')
		bot.register_next_step_handler(msg, yes_buy_reklama_1)
	else:
		bot.send_message(message.chat.id, "‚ö†Ô∏è –û—Ç–º–µ–Ω–∏–ª–∏" , reply_markup=keyboards.main)

def add_money1(message):
   if message.text != '–û—Ç–º–µ–Ω–∞':
      global textt
      textt = message.text
      msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å—É–º–º—É: ',parse_mode='HTML')
      bot.register_next_step_handler(msg, add_money2)
   else:
      bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∫—É',parse_mode='HTML', reply_markup=keyboards.admin)

def add_money2(message):
   if message.text != '–û—Ç–º–µ–Ω–∞':
      connection = sqlite3.connect('database.sqlite')
      q = connection.cursor()
      q.execute("update ugc_users set balans = balans +" + str( message.text ) +  " where id =" + str(textt))
      connection.commit()
      msg = bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ!',parse_mode='HTML', reply_markup=keyboards.admin)
   else:
      bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∫—É',parse_mode='HTML', reply_markup=keyboards.admin)

def edit_prace(message):
   if message.text != '–û—Ç–º–µ–Ω–∞':
      global texttt
      texttt = message.text
      msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å—É–º–º—É: ',parse_mode='HTML')
      bot.register_next_step_handler(msg, edit_prace_2)
   else:
      bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∫—É',parse_mode='HTML', reply_markup=keyboards.admin)

def edit_prace_2(message):
   if message.text != '–û—Ç–º–µ–Ω–∞':
      connection = sqlite3.connect('database.sqlite')
      q = connection.cursor()
      q.execute("update ugc_users set rules = " + str( message.text ) +  " where id =" + str(texttt))
      connection.commit()
      msg = bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ!',parse_mode='HTML', reply_markup=keyboards.admin)
   else:
      bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∫—É',parse_mode='HTML', reply_markup=keyboards.admin)

def yes_buy_reklama_1(message):
	link_link_reklama = message.text
	if link_link_reklama != '–û—Ç–º–µ–Ω–∞':
		if "https://" in str(message.text):
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			q = q.execute("SELECT balans FROM ugc_users WHERE id = "+str(message.chat.id))
			check_balans = q.fetchone()
			if float(check_balans[0]) >= int(500):
				q.execute("INSERT INTO reklama (id,text,linkk) VALUES ('%s', '%s', '%s')"%('1',name_link_reklama, link_link_reklama))
				connection.commit()
				onnection = sqlite3.connect('database.sqlite')
				q = connection.cursor()
				q.execute("update statistika set balans_user = balans_user -" + str('500') +  " where id =" + str(1))
				connection.commit()
				bot.send_message(message.chat.id, '<b>–ì–æ—Ç–æ–≤–æ</b>',parse_mode='HTML', reply_markup=keyboards.main)
			else:
				bot.send_message(message.chat.id, '‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
		else:
			msg = bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:')
			bot.register_next_step_handler(msg, yes_buy_reklama_1)
	else:
		bot.send_message(message.chat.id, "‚ö†Ô∏è –û—Ç–º–µ–Ω–∏–ª–∏" , reply_markup=keyboards.main)

def new_phone(message):
	if message.text != '–û—Ç–º–µ–Ω–∞':
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("update config set qiwi_phone = '"+str(message.text)+"' where id = '1'")
		connection.commit()
		msg = bot.send_message(message.chat.id, '<b>–£—Å–ø–µ—à–Ω–æ!</b>',parse_mode='HTML', reply_markup=keyboards.admin)
	else:
		bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∫—É',parse_mode='HTML', reply_markup=keyboards.admin)

def new_numer(message):
	if message.text != '–û—Ç–º–µ–Ω–∞':
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("update statistika set numer = '"+str(message.text)+"' where id = '1'")
		connection.commit()
		msg = bot.send_message(message.chat.id, '<b>–£—Å–ø–µ—à–Ω–æ!</b>',parse_mode='HTML', reply_markup=keyboards.admin)
	else:
		bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∫—É',parse_mode='HTML', reply_markup=keyboards.admin)



def new_token(message):
	if message.text != '–û—Ç–º–µ–Ω–∞':
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("update config set qiwi_token = '"+str(message.text)+"' where id = '1'")
		connection.commit()
		msg = bot.send_message(message.chat.id, '<b>–£—Å–ø–µ—à–Ω–æ!</b>',parse_mode='HTML', reply_markup=keyboards.admin)
	else:
		bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∫—É',parse_mode='HTML', reply_markup=keyboards.admin)


def countviewtovar(message):
	if str(message.text).isdigit() == True:
		if int(message.text) >= 1:
			global counttovar
			global global_count_tovar
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			q.execute(f"SELECT COUNT(data) from tovar where name = '{idtovar}'")
			counttovar = str(q.fetchone()[0])
			q.execute(f"SELECT name from tovar where name = '{idtovar}'")
			nametovar = str(q.fetchone()[0])
			global_count_tovar = int(message.text)
			if int(counttovar) >= int(message.text):

				keyboardss = types.InlineKeyboardMarkup()
				keyboardss.add(types.InlineKeyboardButton(text='–ö—É–ø–∏—Ç—å', callback_data='buy_'+str(nametovar)))
				bot.send_message(message.chat.id, f'–ü–æ–∫—É–ø–∞–µ–º {message.text} —à—Ç?',parse_mode='HTML', reply_markup=keyboardss)
			else:
				bot.send_message(message.chat.id, '–ù–∞ –±–∞–∑–µ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–∞',parse_mode='HTML')

def send_photoorno(message):
	global text_send_all
	text_send_all = message.text
	msg = bot.send_message(message.chat.id, '<b>–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ:\n\n–°—Å—ã–ª–∫–∞ –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–Ω–æ–ø–∫–∞\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É</b>\n\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–ù–µ—Ç"',parse_mode='HTML')
	bot.register_next_step_handler(msg, admin_send_message_all_text_rus)

def admin_send_message_all_text_rus(message):
		global photoo
		global keyboar
		global v
		try:
			photoo = message.text.split('\n')[1]
			keyboar = message.text.split('\n')[0]
			v = 0
			if str(photoo.lower()) != '–ù–µ—Ç'.lower():
				v = v+1

			if str(keyboar.lower()) != '–ù–µ—Ç'.lower():
				v = v+2

			if v == 0:
				msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n" + text_send_all +'\n\n–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –î–∞',parse_mode='HTML')
				bot.register_next_step_handler(msg, admin_send_message_all_text_da_rus)

			elif v == 1:
				msg = bot.send_photo(message.chat.id,str(photoo), "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n" + text_send_all +'\n\n–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –î–∞',parse_mode='HTML')
				bot.register_next_step_handler(msg, admin_send_message_all_text_da_rus)

			elif v == 2:
				keyboard = types.InlineKeyboardMarkup(row_width=1)
				keyboard.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏',url=f'{keyboar}'))
				msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n" + text_send_all +'\n\n–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –î–∞',parse_mode='HTML',reply_markup=keyboard)
				bot.register_next_step_handler(msg, admin_send_message_all_text_da_rus)

			elif v == 3:
				keyboard = types.InlineKeyboardMarkup(row_width=1)
				keyboard.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏',url=f'{keyboar}'))
				msg = bot.send_photo(message.chat.id,str(photoo), "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n" + text_send_all +'\n\n–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –î–∞',parse_mode='HTML',reply_markup=keyboard)
				bot.register_next_step_handler(msg, admin_send_message_all_text_da_rus)
		except:
			bot.send_message(message.chat.id, '–ê—Ä–≥—É–º–µ–Ω—Ç—ã —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ!')


def admin_send_message_all_text_da_rus(message):
	otvet = message.text
	colvo_send_message_users = 0
	colvo_dont_send_message_users = 0
	if message.text.lower() == '–î–∞'.lower():
		connection = sqlite3.connect('database.sqlite')
		with connection:
			q = connection.cursor()
			bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å!')
			if v == 0:
				q.execute("SELECT * FROM ugc_users")
				row = q.fetchall()
				for i in row:
					jobid = i[0]
					time.sleep(0.2)
					response = requests.post(
						url='https://api.telegram.org/bot{0}/{1}'.format(config.bot_token, "sendMessage"),
						data={'chat_id': jobid, 'text': str(text_send_all),'parse_mode': 'HTML'}
					).json()
					if response['ok'] == False:
						colvo_dont_send_message_users = colvo_dont_send_message_users + 1
					else:
						colvo_send_message_users = colvo_send_message_users + 1;
				bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: '+ str(colvo_send_message_users)+'\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: '+ str(colvo_dont_send_message_users))
			elif v == 1:
				q.execute("SELECT * FROM ugc_users")
				row = q.fetchall()
				for i in row:
					jobid = i[0]


					time.sleep(0.1)
					response = requests.post(
						url='https://api.telegram.org/bot{0}/{1}'.format(config.bot_token, "sendPhoto"),
						data={'chat_id': jobid,'photo': str(photoo), 'caption': str(text_send_all),'parse_mode': 'HTML'}
					).json()
					if response['ok'] == False:
						colvo_dont_send_message_users = colvo_dont_send_message_users + 1
					else:
						colvo_send_message_users = colvo_send_message_users + 1;
				bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: '+ str(colvo_send_message_users)+'\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: '+ str(colvo_dont_send_message_users))

			elif v == 2:
				q.execute("SELECT * FROM ugc_users")
				row = q.fetchall()
				for i in row:
					jobid = i[0]

					time.sleep(0.1)
					reply = json.dumps({'inline_keyboard': [[{'text': '‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç', 'callback_data': f'restart'}]]})
					response = requests.post(
						url='https://api.telegram.org/bot{0}/{1}'.format(config.bot_token, "sendMessage"),
						data={'chat_id': jobid, 'text': str(text_send_all), 'reply_markup': str(reply),'parse_mode': 'HTML'}
					).json()
					if response['ok'] == False:
						colvo_dont_send_message_users = colvo_dont_send_message_users + 1
					else:
						colvo_send_message_users = colvo_send_message_users + 1;
				bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: '+ str(colvo_send_message_users)+'\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: '+ str(colvo_dont_send_message_users))
			elif v == 3:
				q.execute("SELECT * FROM ugc_users")
				row = q.fetchall()
				for i in row:
					jobid = i[0]

					time.sleep(0.1)
					reply = json.dumps({'inline_keyboard': [[{'text': '‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç', 'callback_data': f'restart'}]]})
					response = requests.post(
						url='https://api.telegram.org/bot{0}/{1}'.format(config.bot_token, "sendPhoto"),
						data={'chat_id': jobid,'photo': str(photoo), 'caption': str(text_send_all),'reply_markup': str(reply),'parse_mode': 'HTML'}
					).json()
					if response['ok'] == False:
						colvo_dont_send_message_users = colvo_dont_send_message_users + 1
					else:
						colvo_send_message_users = colvo_send_message_users + 1;
				bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: '+ str(colvo_send_message_users)+'\n–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: '+ str(colvo_dont_send_message_users))

def oplataa(message):
	if message.text == '–Ø –æ–ø–ª–∞—Ç–∏–ª':
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q = q.execute('SELECT comment FROM dep WHERE id_user = '+str(message.chat.id))
		comment_usera = q.fetchone()
		q = q.execute('SELECT summa FROM dep WHERE id_user = '+str(message.chat.id))
		summa_usera = q.fetchone()
		for payment in Qiwi(config.token,config.phone).get_payments(10, operation=OperationType.IN):
			if 'RUB' in str(payment.currency) and str(payment.comment) == str(comment_usera[0]) and float(payment.amount) == float(summa_usera[0]):
				userid = str(message.chat.id)
				connection = sqlite3.connect('database.sqlite')
				userid = str(message.chat.id)
				username = str(message.from_user.username)
				q = connection.cursor()
				q.execute("update ugc_users set balans = balans +" + str( price ) +  " where id =" + userid)
				connection.commit()
				q.execute("select ref from ugc_users where Id = " + str(userid))
				ref_user1 = q.fetchone()[0]
				if ref_user1 != '':
					add_deposit = float(summa_usera[0]) / 100 * 80
					q.execute("update ugc_users set balans = balans + "+str(add_deposit)+" where id =" + str(ref_user1))
					connection.commit()
					q.execute("update statistika set balans_user = balans_user +" + str(add_deposit) +  " where id =" + str(1))
					connection.commit()
				q.execute("delete from dep WHERE id_user = " + str(message.chat.id))
				connection.commit()
				bot.send_message(config.notification, '–ù–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç:\n\n–°—É–º–º–∞: '+str(summa_usera[0])+'\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + str(message.chat.first_name)+ '\nUserName: @' + str(message.from_user.username) + '\nid: ' + str(message.chat.id),parse_mode='HTML',)
				bot.send_message(message.chat.id, '–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ' + str(price) + ' —Ä—É–±', reply_markup=keyboards.main)
				break

			else:
				msg = bot.send_message(message.chat.id,'–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', reply_markup=keyboards.Depozit_oplatil_main)
				bot.register_next_step_handler(msg, oplataa)
				break

	elif message.text == '–û—Ç–º–µ–Ω–∞':
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("delete from dep WHERE id_user = " + str(message.chat.id))
		connection.commit()
		q.close()
		connection.close()
		bot.send_message(message.chat.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é", reply_markup=keyboards.main)


def crypt_oplata(message):
	if message.text != '–û—Ç–º–µ–Ω–∞':
		try:
			price = int(message.text)
			if str(price).isdigit() == True:
				if int(price) < 100:
					msg = bot.send_message(message.chat.id, 'C—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ–Ω—å—à–µ 100 —Ä—É–±')
					bot.register_next_step_handler(msg, crypt_oplata)
				else:
					connection = sqlite3.connect('database.sqlite')
					q = connection.cursor()
					user_agent = {'User-agent': 'Mozilla/5.0'}
					response = requests.get('https://api.cryptonator.com/api/merchant/v1/startpayment?merchant_id=0c44a4087d42ccc415d484a465fae1c9&item_name=–î–µ–ø–æ–∑–∏—Ç&invoice_amount='+str(price)+'&invoice_currency=rur&language=ru&order_id='+str(message.chat.id), headers=user_agent)
					oplata_keybord = types.InlineKeyboardMarkup()
					btn_site = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=str(response.url))
					oplata_keybord.add(btn_site)
					bot.send_message(message.chat.id, "<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥</b>", reply_markup=oplata_keybord, parse_mode='HTML')
					bot.send_message(message.chat.id, "<b>–ü–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞ –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω</b>", reply_markup=keyboards.main, parse_mode='HTML')

			else:
				msg = bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ü–µ–ª–æ–µ-–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ')
				bot.register_next_step_handler(msg, crypt_oplata)
		except ValueError:
			msg = bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ü–µ–ª–æ–µ-–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ')
			bot.register_next_step_handler(msg, crypt_oplata)
	else:
		bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é', reply_markup=keyboards.main)

def btc_oplata(message):
	if message.text != '–û—Ç–º–µ–Ω–∞':
		try:
			price = int(message.text)
			if str(price).isdigit() == True:
				if int(price) < 100:
					msg = bot.send_message(message.chat.id, 'C—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ–Ω—å—à–µ 100 —Ä—É–±')
					bot.register_next_step_handler(msg, btc_oplata)
				else:
					msg = bot.send_message(message.chat.id, f"<b>‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ BTC –ß–ï–ö –Ω–∞ —Å—É–º–º—É:{message.text}</b>", reply_markup=keyboards.main, parse_mode='HTML')
					bot.register_next_step_handler(msg, btc_oplata_1)

			else:
				msg = bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ü–µ–ª–æ–µ-–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ')
				bot.register_next_step_handler(msg, btc_oplata)
		except ValueError:
			msg = bot.send_message(message.chat.id, '–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ü–µ–ª–æ–µ-–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ')
			bot.register_next_step_handler(msg, btc_oplata)
	else:
		bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é', reply_markup=keyboards.main)


def btc_oplata_1(message):
	if message.text != '–û—Ç–º–µ–Ω–∞':
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',callback_data=f'good_oplata_btc_{message.chat.id}'))
		bot.send_message(message.chat.id, '‚ôªÔ∏è –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –≤—Ä–µ–º—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è 5-30 –º–∏–Ω—É—Ç')
		bot.send_message(config.admin, f'#–ù–û–í–´–ô–ß–ï–ö \n {message.text}', reply_markup=keyboard)


	else:
		bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é', reply_markup=keyboards.main)

def svoi_text(message):
	svoi_texttt = message.text
	fname = svoi_texttt
	lines = 0
	words = 0
	letters = 0


	for line in fname:
  # –ë—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞ –æ—á–µ—Ä–µ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
  # –û–Ω–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π line.
  # –°—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–æ–∫ —Å–ª–µ–¥—É–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 1.
		lines += 1
		pos = 'out'
    # –° –ø–æ–º–æ—â—å—é len –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
    # –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ —Å—á–µ—Ç—á–∏–∫—É –±—É–∫–≤.
		letters += len(line)

    # –ö–æ–¥ –Ω–∏–∂–µ —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ.

    # –§–ª–∞–≥, —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Å–ª–æ–≤–∞.


    # –¶–∏–∫–ª –ø–µ—Ä–µ–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º.
		for letter in line:
        # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–π —Å–∏–º–≤–æ–ª –Ω–µ –ø—Ä–æ–±–µ–ª, –∞ —Ñ–ª–∞–≥ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ "–≤–Ω–µ —Å–ª–æ–≤–∞",
        # —Ç–æ –∑–Ω–∞—á–∏—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ.
			if letter != ' ' and pos == 'out':
            # –ü–æ—ç—Ç–æ–º—É –Ω–∞–¥–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–ª–æ–≤ –Ω–∞ 1,
				words += 1
            # –∞ —Ñ–ª–∞–≥ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ "–≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞".
				pos = 'in'
        # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–π —Å–∏–º–≤–æ–ª –ø—Ä–æ–±–µ–ª,
			elif letter == ' ':
            # —Ç–æ —Å–ª–µ–¥—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –≤ –∑–Ω–∞—á–µ–Ω–∏–µ "–≤–Ω–µ —Å–ª–æ–≤–∞".
				pos = 'out'

# –í—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤ —Å—Ç—Ä–æ–∫, —Å–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω.print("Letters:", letters)
	if int(letters) <= 70:
		if message.text != '–û—Ç–º–µ–Ω–∞':
			sms_link = message.text
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			q.execute("INSERT INTO sms_temp (id,text,link) VALUES ('%s', '%s', '%s')"%(message.chat.id,sms_link,'0'))
			connection.commit()
			q.execute(f"SELECT text FROM sms_temp where id = {message.chat.id}")
			text_sms = q.fetchone()
			msg = bot.send_message(message.chat.id, '<b>‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\n\n–ü—Ä–∏–º–µ—Ä:</b> <code>79999999999</code>', parse_mode='HTML')
			bot.register_next_step_handler(msg, send_2)
		else:
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			q.execute('DELETE FROM sms_temp WHERE id = '+ str(message.chat.id))
			connection.commit()
			bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é', reply_markup=keyboards.main)
	else:
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute('DELETE FROM sms_temp WHERE id = '+ str(message.chat.id))
		connection.commit()
		msg = bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞,–±–æ–ª–µ–µ 70 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–æ–π:')
		bot.register_next_step_handler(msg, svoi_text)

def send(message):
	global sms_linkssss
	sms_link = message.text
	if message.text != '–û—Ç–º–µ–Ω–∞':
		if "https://" in str(message.text):
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			q.execute(f"update sms_temp set link = '"+str(sms_link)+f"' where id = '{message.chat.id}'")
			connection.commit()
			msg = bot.send_message(message.chat.id, '<b>‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\n\n–ü—Ä–∏–º–µ—Ä:</b> <code>79999999999</code>', parse_mode='HTML')
			bot.register_next_step_handler(msg, send_1)
		else:
			msg = bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:')
			bot.register_next_step_handler(msg, send)
	else:
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute('DELETE FROM sms_temp WHERE id = '+ str(message.chat.id))
		connection.commit()
		bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é', reply_markup=keyboards.main)

def user_id_balance11(message):
	if message.text != '–û—Ç–º–µ–Ω–∞':
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		print(user_id_balance)
		q.execute(f"update ugc_users set balans = balans + {message.text} where id = {user_id_balance}")
		connection.commit()
		q.execute("update statistika set balans_user = balans_user -" + str(message.text) +  " where id =" + str(1))
		connection.commit()
		today = datetime.datetime.today()
		q.execute("INSERT INTO ugc_buys (idtovar,nametovar,date,data,userid,username,colvo,price,bot_name) VALUES ('%s','%s','%s','%s','%s','%s','%s','%s','%s')"%('2124','afawf',today.strftime("%H:%M %d.%m.%Y"),'2124',message.chat.id,str(message.chat.first_name),'1',str(message.text), '212asas4'))
		connection.commit()
		bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ', reply_markup=keyboards.main)
		bot.send_message(user_id_balance, '–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω', reply_markup=keyboards.main)
	else:
		bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é', reply_markup=keyboards.main)

def send_2(message):
	sms_momerrr = message.text
	if message.text != '–û—Ç–º–µ–Ω–∞':

		qiwi_user = qiwi_user = message.text
		if qiwi_user[:1] == '7' and len(qiwi_user) == 11 or qiwi_user[:3] == '380' and len(qiwi_user[3:]) == 9 or qiwi_user[:3] == '375' and len(qiwi_user) <= 12:

			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			q.execute("SELECT rules FROM ugc_users  where id = "+str(message.chat.id))
			sms_prace = q.fetchone()
			q.execute("SELECT numer FROM statistika  where id = "+str(1))
			numer = q.fetchone()
			print(numer[0])
			q.execute(f"SELECT text FROM sms_temp where id = {message.chat.id}")
			text_sms = q.fetchone()
			q = q.execute("SELECT balans FROM ugc_users WHERE id = "+str(message.chat.id))
			check_balans = q.fetchone()
			q = q.execute("SELECT numbers FROM port WHERE id = "+str(message.chat.id))
			numberssss = q.fetchone()

			if float(check_balans[0]) >= int(sms_prace[0]):
				bot.send_message(message.chat.id, '‚ôªÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é, –æ–∂–∏–¥–∞–π—Ç–µ.', reply_markup=keyboards.main)
				q.execute("update ugc_users set balans = balans - "+str(sms_prace[0])+" where id = " + str(message.chat.id))
				connection.commit()
				q.execute("update statistika set balans_user = balans_user -" + str(sms_prace[0]) +  " where id =" + str(1))
				connection.commit()
				connection = sqlite3.connect('database.sqlite')
				q = connection.cursor()
				texttttt = f'''{sms_momerrr}'''
				q.execute("INSERT INTO logi (id,text) VALUES ('%s', '%s')"%(message.chat.id,texttttt))
				connection.commit()
				try:
					a = numberssss
					sssss = client.messages.create(to=f"+{sms_momerrr}",status_callback="https://c4b315a90e1c.ngrok.io/", from_=f"{a[0] if numberssss != None else numer[0]}",body=f"{text_sms[0]}")
					vvvvv = f'''
{sssss.body}
{sssss.sid}'''
					q.execute("INSERT INTO logi (id,text) VALUES ('%s', '%s')"%(message.chat.id,sssss.sid))
					connection.commit()
					q.execute('DELETE FROM sms_temp WHERE id = '+ str(message.chat.id))
					connection.commit()
					bot.send_message(config.admin, f'#–ù–æ–≤–∞—è—Å–º—Å–Æ–∑–µ—Ä: {message.chat.id}\n\n {vvvvv} ', reply_markup=keyboards.main)

					bot.send_message(message.chat.id, '''‚ÑπÔ∏è –§–∞–∫—Ç–æ—Ä—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:

‚úîÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å–µ—Ç–∏ –∏ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–º—Å –æ—Ç –∏–º–µ–Ω–∏ (—Å—Ç–∞—Ä—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤—é—Ç –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)

‚úîÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–æ—É–º–∏–Ω–≥–µ

‚úîÔ∏è –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–ø–∞–ª –≤ —Å–ø–∞–º —Ñ–∏–ª—å—Ç—Ä

‚úîÔ∏è –ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –Ω–µ –≤–∫–ª—é—á—ë–Ω –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫''', reply_markup=keyboards.main)
					bot.send_message(message.chat.id, '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup=keyboards.main)
					connection = sqlite3.connect('database.sqlite')
					q = connection.cursor()
					q.execute("SELECT * FROM reklama")
					row = q.fetchall()
					text = ''
					keyboard = types.InlineKeyboardMarkup()
					for i in row:
						text = f'{text}<a href="{i[2]}">{i[1]}</a>\n‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ\n'
					keyboard.add(types.InlineKeyboardButton(text='üí∞ –ö—É–ø–∏—Ç—å —Å—Å—ã–ª–∫—É',callback_data='buy_reklama'))
					bot.send_message(message.chat.id, f'''<b>üíé –†–µ–∫–ª–∞–º–∞:</b>

{text}
''' ,parse_mode='HTML', reply_markup=keyboard,disable_web_page_preview = True)
				except:
					connection = sqlite3.connect('database.sqlite')
					q = connection.cursor()
					q.execute("update ugc_users set balans = balans + "+str(sms_prace[0])+" where id = " + str(message.chat.id))
					connection.commit()
					q.execute("update statistika set balans_user = balans_user +" + str(sms_prace[0]) +  " where id =" + str(1))
					connection.commit()
					connection = sqlite3.connect('database.sqlite')
					q = connection.cursor()
					q.execute('DELETE FROM sms_temp WHERE id = '+ str(message.chat.id))
					connection.commit()
					bot.send_message(message.chat.id, '‚ö† –û—à–∏–±–∫–∞. –ú—ã —É–∂–µ –∑–Ω–∞–µ–º –∏ —Ä–µ—à–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É.')
					bot.send_message(config.admin, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.')

			else:
				bot.send_message(message.chat.id, '‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')

		else:
			msg = bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è:')
			bot.register_next_step_handler(msg, send_1)

	else:
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute('DELETE FROM sms_temp WHERE id = '+ str(message.chat.id))
		connection.commit()
		bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é', reply_markup=keyboards.main)

def send_1(message):
	sms_momer = message.text
	if message.text != '–û—Ç–º–µ–Ω–∞':

		qiwi_user = qiwi_user = message.text
		if qiwi_user[:1] == '7' and len(qiwi_user) == 11 or qiwi_user[:3] == '380' and len(qiwi_user[3:]) == 9 or qiwi_user[:3] == '375' and len(qiwi_user) <= 12:

			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			q = q.execute("SELECT balans FROM ugc_users WHERE id = "+str(message.chat.id))
			check_balans = q.fetchone()
			q.execute("SELECT rules FROM ugc_users  where id = "+str(message.chat.id))
			sms_prace = q.fetchone()
			if float(check_balans[0]) >= int(25):
				q.execute(f"SELECT text FROM sms_temp where id = {message.chat.id}")
				text_sms = q.fetchone()[0]
				q.execute(f"SELECT link FROM sms_temp where id = {message.chat.id}")
				sms_link = q.fetchone()[0]
				q.execute("update ugc_users set balans = balans - "+str(sms_prace[0])+" where id = " + str(message.chat.id))
				connection.commit()
				q.execute("update statistika set balans_user = balans_user -" + str(sms_prace[0]) +  " where id =" + str(1))
				connection.commit()
				q.execute("SELECT numer FROM statistika  where id = "+str(1))
				numer = q.fetchone()
				print(numer[0])
				connection = sqlite3.connect('database.sqlite')
				q = connection.cursor()
				texttttt = f'''{text_sms}:{sms_link}:{sms_momer}'''
				q.execute("INSERT INTO logi (id,text) VALUES ('%s', '%s')"%(message.chat.id,texttttt))
				connection.commit()
				r = requests.get(f"https://uni.su/api/?url={sms_link}")
				print(r.text)
				try:
					sssss = client.messages.create(to=f"+{sms_momer}",status_callback="https://c4b315a90e1c.ngrok.io/", from_=f"+{numer[0]}",body=f"{text_sms} https://{r.text}")
					vvvvv = f'''
{sssss.body}
{sssss.sid}
'''
					q.execute("INSERT INTO logi (id,text) VALUES ('%s', '%s')"%(message.chat.id,sssss.sid))
					connection.commit()
					bot.send_message(config.admin, f'#–ù–æ–≤–∞—è—Å–º—Å–Æ–∑–µ—Ä: {message.chat.id}\n\n {vvvvv} ', reply_markup=keyboards.main)
					bot.send_message(message.chat.id, '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup=keyboards.main)
					connection = sqlite3.connect('database.sqlite')
					q = connection.cursor()
					q.execute("SELECT * FROM reklama")
					row = q.fetchall()
					text = ''
					keyboard = types.InlineKeyboardMarkup()
					for i in row:
						text = f'{text}<a href="{i[2]}">{i[1]}</a>\n‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ\n'
					keyboard.add(types.InlineKeyboardButton(text='üí∞ –ö—É–ø–∏—Ç—å —Å—Å—ã–ª–∫—É',callback_data='buy_reklama'))
					bot.send_message(message.chat.id, f'''<b>üíé –†–µ–∫–ª–∞–º–∞:</b>

{text}
''' ,parse_mode='HTML', reply_markup=keyboard,disable_web_page_preview = True)
					connection = sqlite3.connect('database.sqlite')
					q = connection.cursor()
					q.execute('DELETE FROM sms_temp WHERE id = '+ str(message.chat.id))
					connection.commit()
				except:
					connection = sqlite3.connect('database.sqlite')
					q = connection.cursor()
					q.execute("update ugc_users set balans = balans + "+str(sms_prace[0])+" where id = " + str(message.chat.id))
					connection.commit()
					q.execute("update statistika set balans_user = balans_user +" + str(sms_prace[0]) +  " where id =" + str(1))
					connection.commit()
					bot.send_message(message.chat.id, '‚ö† –û—à–∏–±–∫–∞. –ú—ã —É–∂–µ –∑–Ω–∞–µ–º –∏ —Ä–µ—à–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É.')
					bot.send_message(config.admin, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.')
			else:
				bot.send_message(message.chat.id, '‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')

		else:
			msg = bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è:')
			bot.register_next_step_handler(msg, send_1)

	else:
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute('DELETE FROM sms_temp WHERE id = '+ str(message.chat.id))
		connection.commit()
		bot.send_message(message.chat.id, '–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é', reply_markup=keyboards.main)


@bot.callback_query_handler(func=lambda call:True)
def podcategors(call):

	if call.data[:12] == 'awhat_oplata':
		what_oplata = types.InlineKeyboardMarkup(row_width=2)
		what_oplata_qiwi = types.InlineKeyboardButton(text='ü•ù Qiwi', callback_data='Depoziit_qiwi')
		what_oplataa_crypta = types.InlineKeyboardButton(text='üí≤ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', callback_data='crypt_oplata')
		what_oplataa_btc = types.InlineKeyboardButton(text='üéÅ BTC –ß–ï–ö', callback_data='btc_oplata')
		what_oplata.add(what_oplata_qiwi,what_oplataa_crypta,what_oplataa_btc)
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("SELECT * FROM reklama")
		row = q.fetchall()
		text = ''
		keyboard = types.InlineKeyboardMarkup()
		for i in row:
			text = f'{text}<a href="{i[2]}">{i[1]}</a>\n‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ\n'
		keyboard.add(types.InlineKeyboardButton(text='üí∞ –ö—É–ø–∏—Ç—å —Å—Å—ã–ª–∫—É',callback_data='buy_reklama'))
		bot.send_message(call.message.chat.id, f'''<b>üíé –†–µ–∫–ª–∞–º–∞:</b>

{text}
''' ,parse_mode='HTML', reply_markup=keyboard,disable_web_page_preview = True)
		bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞', reply_markup=what_oplata)

	if call.data == 'crypt_oplata':
		bot.send_message(call.from_user.id,  'üëÅ‚Äçüó® –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ')

	if call.data[:12] == 'btc_oplata':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		msg = bot.send_message(call.from_user.id,  'üëÅ‚Äçüó® –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\nüíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç - 100 —Ä—É–±', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg, btc_oplata)


	if call.data[:13] == 'Depoziit_qiwi':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å',callback_data='Check_Depozit_qiwi_'))
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("SELECT qiwi_phone FROM config where id = '1'")
		qiwi_phone = q.fetchone()
		qiwi_oplata_url = "https://qiwi.com/payment/form/99?extra['account']="+str(qiwi_phone[0])+"&extra['comment']="+str(call.message.chat.id)+"&amountInteger=100&amountFraction=0&currency=643&blocked[1]=account&blocked[2]=comment"
		keyboard.add(types.InlineKeyboardButton(text='üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',url=qiwi_oplata_url))
		bot.send_message(call.message.chat.id, "üì• <b>–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ QIWI –∫–æ—à–µ–ª—ë–∫, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É —Å—Ä–µ–¥—Å—Ç–≤ (–º–∏–Ω–∏–º—É–º </b><code>100</code><b> —Ä—É–±) –Ω–∞ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∏–∂–µ, –æ—Å—Ç–∞–≤–∏–≤ –ø—Ä–∏ —ç—Ç–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–µ—Ä–µ–≤–æ–¥–∞:\n\nüí≥ –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞:</b> <code>%s</code>\nüí¨ <b>–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É:</b> <code>%s</code>" % (str(qiwi_phone[0]), str(call.message.chat.id)),parse_mode='HTML', reply_markup=keyboard)
		bot.send_message(call.message.chat.id, '‚ö†Ô∏è  –î–µ–ø–æ–∑–∏—Ç –º–µ–Ω—å—à–µ 100—Ä = –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–æ–µ–∫—Ç—É !')

	if call.data[:19] == 'Check_Depozit_qiwi_':
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("SELECT qiwi_phone FROM config where id = 1")
		qiwi_phone = str(q.fetchone()[0])
		q.execute("SELECT qiwi_token FROM config where id = 1")
		qiwi_token = str(q.fetchone()[0])
		for payment in Qiwi(qiwi_token,qiwi_phone).get_payments(10, operation=OperationType.IN):
			q = q.execute('SELECT id FROM temp_pay WHERE txnid = ' + str(payment.raw['txnId']))
			temp_pay = q.fetchone()
			if 'RUB' in str(payment.currency) and str(payment.comment) == str(call.message.chat.id) and temp_pay == None and float(payment.amount) >= 100:
				q.execute("INSERT INTO temp_pay (txnid) VALUES ('%s')"%(payment.raw['txnId']))
				connection.commit()
				bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
				connection = sqlite3.connect('database.sqlite')
				q = connection.cursor()
				q.execute("update ugc_users set balans = balans + "+str(payment.amount)+" where id = " + str(call.message.chat.id))
				connection.commit()

				today = datetime.datetime.today()
				q.execute("INSERT INTO ugc_buys (idtovar,nametovar,date,data,userid,username,colvo,price,bot_name) VALUES ('%s','%s','%s','%s','%s','%s','%s','%s','%s')"%('2124','afawf',today.strftime("%H:%M %d.%m.%Y"),'2124',call.message.chat.id,str(call.message.chat.first_name),'1',str(payment.amount), '212asas4'))
				connection.commit()
				q.execute("select ref from ugc_users where Id = " + str(call.message.chat.id))
				ref_user1 = q.fetchone()[0]
				if ref_user1 != '':
					add_deposit = int(payment.amount) / 100 * 5
					q.execute("update ugc_users set balans = balans + "+str(add_deposit)+" where id =" + str(ref_user1))
					connection.commit()
					bot.send_message(ref_user1, f'–†–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –∏ –≤–∞–º –∑–∞—á–∏—Å–ª–∏–Ω–Ω–æ {add_deposit} RUB',parse_mode='HTML')

				bot.send_message(config.admin, "<b>–ù–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç!</b>\nId –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + str(call.message.chat.id)+"\n–°—É–º–º–∞: " + str(payment.amount),parse_mode='HTML')
				bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚úÖ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ "+str(payment.amount) +' —Ä—É–±')
				break
			else:
				bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚ö† –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

	elif call.data == 'edit_praces':
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("SELECT rules FROM ugc_users  where id = "+str(call.message.chat.id))
		sms_prace = q.fetchone()
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()

		keyboard.add(types.InlineKeyboardButton(text=f'VIP | 1000—Ä',callback_data='vip_1'),types.InlineKeyboardButton(text=f'Premium | 10000—Ä',callback_data='vip_3'))
		keyboard.add(types.InlineKeyboardButton(text=f'VIP+ | 5000—Ä',callback_data='vip_2'),types.InlineKeyboardButton(text=f'Premium+ | 30000—Ä',callback_data='vip_4'))
		bot.send_message(call.message.chat.id, f'''‚ûñ VIP: —Ü–µ–Ω–∞ —Å–º—Å 12—Ä
‚ûñ VIP+: —Ü–µ–Ω–∞ —Å–º—Å 10—Ä
‚ûñ Premium: —Ü–µ–Ω–∞ —Å–º—Å 7—Ä
‚ûñ Premium+: —Ü–µ–Ω–∞ —Å–º—Å 5—Ä

‚ö†Ô∏è –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã –ø–æ–¥–∫–ª—é—á–∞—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—á–µ—Ç—É.''' ,parse_mode='HTML', reply_markup=keyboard)

	elif call.data == 'vip_1':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q = q.execute("SELECT balans FROM ugc_users WHERE id = "+str(call.message.chat.id))
		check_balans = q.fetchone()
		if float(check_balans[0]) >= int(1000):
			q.execute("update ugc_users set rules = " + str(12) +  " where id =" + str(call.message.chat.id))
			connection.commit()
			bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ —Ç–∞—Ä–∏—Ñ")

		else:
			bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

	elif call.data == 'vip_2':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q = q.execute("SELECT balans FROM ugc_users WHERE id = "+str(call.message.chat.id))
		check_balans = q.fetchone()
		if float(check_balans[0]) >= int(5000):
			q.execute("update ugc_users set rules = " + str(10) +  " where id =" + str(call.message.chat.id))
			connection.commit()
			bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ —Ç–∞—Ä–∏—Ñ")

		else:
			bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

	elif call.data == 'vip_3':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q = q.execute("SELECT balans FROM ugc_users WHERE id = "+str(call.message.chat.id))
		check_balans = q.fetchone()
		if float(check_balans[0]) >= int(10000):
			q.execute("update ugc_users set rules = " + str(7) +  " where id =" + str(call.message.chat.id))
			connection.commit()
			bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ —Ç–∞—Ä–∏—Ñ")

		else:
			bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

	elif call.data == 'vip_4':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q = q.execute("SELECT balans FROM ugc_users WHERE id = "+str(call.message.chat.id))
		check_balans = q.fetchone()
		if float(check_balans[0]) >= int(30000):
			q.execute("update ugc_users set rules = " + str(5) +  " where id =" + str(call.message.chat.id))
			connection.commit()
			bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ —Ç–∞—Ä–∏—Ñ")

		else:
			bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

	elif call.data == '—à–∞–±–ª–æ–Ω—ã':
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			q.execute("SELECT rules FROM ugc_users  where id = "+str(call.message.chat.id))
			sms_prace = q.fetchone()
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'Avito | {sms_prace[0]}—Ä',callback_data='Avito'),types.InlineKeyboardButton(text=f'Avito 2.0 | {sms_prace[0]}—Ä',callback_data='Avito_2'))
			keyboard.add(types.InlineKeyboardButton(text=f'Youla | {sms_prace[0]}—Ä',callback_data='Youla'),types.InlineKeyboardButton(text=f'Youla 2.0 | {sms_prace[0]}—Ä',callback_data='Youla_2'))
			keyboard.add(types.InlineKeyboardButton(text=f'TK | {sms_prace[0]}—Ä',callback_data='TK'),types.InlineKeyboardButton(text=f'TK 2.0 | {sms_prace[0]}—Ä',callback_data='TK_2'))
			bot.send_message(call.message.chat.id, f'‚ÑπÔ∏è –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ' ,parse_mode='HTML')

	elif call.data == 'Avito':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("SELECT * FROM sms where servis = 'avito'")
		row = q.fetchall()
		q.close()
		text = ''
		keyboard = types.InlineKeyboardMarkup()
		for i in row:
			keyboard.add(types.InlineKeyboardButton(text=f'{i[0]}',callback_data=f'send_{i[0]}'))
			text = f'{text}id: <code>{i[0]}</code>| –¢–µ–∫—Å—Ç —Å–æ–æ–±—à–µ–Ω–∏—è: <code>{i[2]}</code>\n'
		msg = bot.send_message(call.message.chat.id, '<b>‚ÑπÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ id —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n'+str(text),parse_mode='HTML', reply_markup=keyboard)

	elif call.data == '—Å–æ–∫—Ä–∞—Ç–∏—Ç—å_—Å—Å—ã–ª–∫—É':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		msg = bot.send_message(call.message.chat.id, '<b>‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:\n\n–ü—Ä–∏–º–µ—Ä:</b> <code>https://yandex.ru/</code>',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg,generator_url)

	elif call.data == 'Avito_2':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("SELECT * FROM sms where servis = 'avito_2'")
		row = q.fetchall()
		q.close()
		text = ''
		keyboard = types.InlineKeyboardMarkup()
		for i in row:
			keyboard.add(types.InlineKeyboardButton(text=f'{i[0]}',callback_data=f'send_{i[0]}'))
			text = f'{text}id: <code>{i[0]}</code>| –¢–µ–∫—Å—Ç —Å–æ–æ–±—à–µ–Ω–∏—è: <code>{i[2]}</code>\n'
		msg = bot.send_message(call.message.chat.id, '<b>‚ÑπÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ id —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n'+str(text),parse_mode='HTML', reply_markup=keyboard)

	elif call.data == 'Youla':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("SELECT * FROM sms where servis = 'youla'")
		row = q.fetchall()
		q.close()
		text = ''
		keyboard = types.InlineKeyboardMarkup()
		for i in row:
			keyboard.add(types.InlineKeyboardButton(text=f'{i[0]}',callback_data=f'send_{i[0]}'))
			text = f'{text}id: <code>{i[0]}</code>| –¢–µ–∫—Å—Ç —Å–æ–æ–±—à–µ–Ω–∏—è: <code>{i[2]}</code>\n'
		msg = bot.send_message(call.message.chat.id, '<b>‚ÑπÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ id —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n'+str(text),parse_mode='HTML', reply_markup=keyboard)

	elif call.data == 'Youla_2':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("SELECT * FROM sms where servis = 'youla_2'")
		row = q.fetchall()
		q.close()
		text = ''
		keyboard = types.InlineKeyboardMarkup()
		for i in row:
			keyboard.add(types.InlineKeyboardButton(text=f'{i[0]}',callback_data=f'send_{i[0]}'))
			text = f'{text}id: <code>{i[0]}</code>| –¢–µ–∫—Å—Ç —Å–æ–æ–±—à–µ–Ω–∏—è: <code>{i[2]}</code>\n'
		msg = bot.send_message(call.message.chat.id, '<b>‚ÑπÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ id —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n'+str(text),parse_mode='HTML', reply_markup=keyboard)

	elif call.data == 'TK':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("SELECT * FROM sms where servis = 'tk'")
		row = q.fetchall()
		q.close()
		text = ''
		keyboard = types.InlineKeyboardMarkup()
		for i in row:
			keyboard.add(types.InlineKeyboardButton(text=f'{i[0]}',callback_data=f'send_{i[0]}'))
			text = f'{text}id: <code>{i[0]}</code>| –¢–µ–∫—Å—Ç —Å–æ–æ–±—à–µ–Ω–∏—è: <code>{i[2]}</code>\n'
		msg = bot.send_message(call.message.chat.id, '<b>‚ÑπÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ id —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n'+str(text),parse_mode='HTML', reply_markup=keyboard)

	elif call.data == 'TK_2':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("SELECT * FROM sms where servis = 'tk_2'")
		row = q.fetchall()
		q.close()
		text = ''
		keyboard = types.InlineKeyboardMarkup()
		for i in row:
			keyboard.add(types.InlineKeyboardButton(text=f'{i[0]}',callback_data=f'send_{i[0]}'))
			text = f'{text}id: <code>{i[0]}</code>| –¢–µ–∫—Å—Ç —Å–æ–æ–±—à–µ–Ω–∏—è: <code>{i[2]}</code>\n'
		msg = bot.send_message(call.message.chat.id, '<b>‚ÑπÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ id —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n'+str(text),parse_mode='HTML', reply_markup=keyboard)

	elif call.data[:5] == 'send_':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute(f"SELECT text FROM sms where id = {call.data[5:]}")
		row = q.fetchone()
		text_sms = row[0]
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("INSERT INTO sms_temp (id,text,link) VALUES ('%s', '%s', '%s')"%(call.message.chat.id,text_sms,'0'))
		connection.commit()
		msg = bot.send_message(call.message.chat.id, '<b>‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:\n\n–ü—Ä–∏–º–µ—Ä:</b> <code>https://yandex.ru/</code>',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg,send)

	elif call.data == 'svoi_text':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		msg = bot.send_message(call.message.chat.id, '<b>‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b> \n\n–ú–∞–∫—Å–∏–º—É–º 70 —Å–∏–º–≤–æ–ª–æ–≤',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg,svoi_text)

	elif call.data[:16] == 'good_oplata_btc_':
		global user_id_balance
		user_id_balance = call.data[16:]
		#bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		msg = bot.send_message(call.message.chat.id, '<b>‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:</b>',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg,user_id_balance11)

	elif call.data == "vau":
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='‚ûï –°–æ–∑–¥–∞—Ç—å',callback_data=f'vau_add'),types.InlineKeyboardButton(text=' ‚úîÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',callback_data=f'vau_good'))
		bot.send_message(call.message.chat.id, "<b>–ß—Ç–æ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?</b>",parse_mode='HTML', reply_markup=keyboard)

	elif call.data == "–Ω–∏—Å—Ç—Ä–æ–∏–∫–∏":
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='üîÑ –°–º–µ–Ω–∏—Ç—å | 70—Ä',callback_data=f'—Å–º–µ–Ω–∞_–ø–æ—Ä—Ç–∞'))
		keyboard.add(types.InlineKeyboardButton(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',callback_data=f'–∏–Ω—Ñ–æ_–Ω–æ–º–µ—Ä'))
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q = q.execute("SELECT numbers FROM port WHERE id = "+str(call.message.chat.id))
		numberssss = q.fetchone()
		bot.send_message(call.message.chat.id,  f'''‚ûñ –ü–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {'–õ–∏—á–Ω—ã–π' if numberssss != None else '–ü—É–±–ª–∏—á–Ω—ã–π'}

‚ö†Ô∏è –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç''',parse_mode='HTML', reply_markup=keyboard)

	elif call.data == "—Å–º–µ–Ω–∞_–ø–æ—Ä—Ç–∞":
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚úÖ –û–∂–∏–¥–∞–π—Ç–µ")
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q = q.execute("SELECT balans FROM ugc_users WHERE id = "+str(call.message.chat.id))
		check_balans = q.fetchone()
		if float(check_balans[0]) >= int(70):
			connection = sqlite3.connect('database.sqlite')
			q = connection.cursor()
			q.execute("update ugc_users set balans = balans - "+str(70)+" where id = " + str(call.message.chat.id))
			connection.commit()
			local = client.available_phone_numbers('US').local.list(limit=1)

			for record in local:
				print(record.friendly_name)
				local = record.friendly_name
# local = client.available-phone_nubmers('US').local.list(limit=20)



				text = local.replace('(','').replace(')','').replace(' ','').replace('-', '')
				print(text)
				phone = f'+1{text}'
				print(phone)
				incoming_phone_number = client.incoming_phone_numbers \
            	          .create(phone_number=f'{phone}')
				connection = sqlite3.connect('database.sqlite', uri=True, check_same_thread=False)
				q = connection.cursor()
				q.execute(f"SELECT numbers FROM port where id = {call.message.chat.id}")
				check_phone = q.fetchone()
				if check_phone == None:
					q.execute("INSERT INTO port (id,numbers) VALUES ('%s','%s')"%(call.message.chat.id,str(phone)))
					connection.commit()
				else:
					q.execute(f"update port set numbers = '{phone}' where id = '{call.message.chat.id}'")
					connection.commit()

				print(incoming_phone_number.sid)
			#—Å–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞
			#—Å–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞
			#—Å–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞
			#—Å–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞
				bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –ø–æ—Ä—Ç")

		else:
			bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")


	elif call.data == "–∏–Ω—Ñ–æ_–Ω–æ–º–µ—Ä":
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–Ω–∏—Å—Ç—Ä–æ–∏–∫–∏'))
		bot.send_message(call.message.chat.id, '''‚ûñ –ü–æ—Ä—Ç—ã —Å–ª—É–∂–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –µ—Å–ª–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞ –ø—É–±–ª–∏—á–Ω–æ–º —Ç–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –Ω–∞ –º—Ç—Å, –±–∏–ª–∞–π–Ω –º—ã –Ω–µ –Ω–µ—Å—ë–º.

‚ûñ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ 1 –ø–æ—Ä—Ç–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –º—Ç—Å –∏ –±–∏–ª–∞–π–Ω. –û—Å—Ç–æ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–≤—è–∑–∏ –ø—Ä–æ–ø—É—Å—Ç—è—Ç –∏ 10000 —Å–æ–æ–±—â–µ–Ω–∏–π''',parse_mode='HTML', reply_markup=keyboard)

	elif call.data == "vau_add":
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = sqlite3.connect('database.sqlite')
		q = connection.cursor()
		q.execute("SELECT balans FROM ugc_users where id is " + str(call.message.chat.id))
		balanss = q.fetchone()
		msg = bot.send_message(call.message.chat.id, f'''–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É RUB –≤—ã–ø–∏—Å–∞—Ç—å –í–∞—É—á–µ—Ä ? (–ï–≥–æ —Å–º–æ–∂–µ—Ç –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–Ω–∞—é—â–∏–π –∫–æ–¥).

–î–æ—Å—Ç—É–ø–Ω–æ: {balanss[0]} RUB''',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg, vau_add)

	elif call.data == "vau_good":
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		msg = bot.send_message(call.message.chat.id, '''–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—É—á–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∫–æ–¥:''',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg, vau_good)

	elif call.data == "lotosca":
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'‚≠êÔ∏è Lite',callback_data=f'igra_ticet'))
		keyboard.add(types.InlineKeyboardButton(text=f'üíé Gold',callback_data=f'igra_ticet_vip'))
		bot.send_message(call.message.chat.id, '''–í –∫–∞–∫–æ–µ –∏–≥—Ä–∞–µ–º ?''',parse_mode='HTML', reply_markup=keyboard)

	elif call.data[:16] == 'restart':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		bot.send_message(call.message.chat.id,f'üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <a href="tg://user?id={call.message.chat.id}">{call.message.chat.first_name}</a>',parse_mode='HTML', reply_markup=keyboards.main)


	elif call.data == 'buy_reklama':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'‚úîÔ∏è –°–æ–≥–ª–∞—Å–µ–Ω, –∫—É–ø–∏—Ç—å| 500 RUB',callback_data=f'yes_buy_reklama'))
		bot.send_message(call.message.chat.id, '''<b>–í –≤–∏—Ç—Ä–∏–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è 5 –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.
–î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞, –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –ø–µ—Ä–≤–æ–π, –∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.

–°—Å—ã–ª–∫—É —É–≤–∏–¥—è—Ç:
‚ûñ–í –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
‚ûñ–ü—Ä–∏ –¥–µ–ø–æ–∑–∏—Ç–µ.
‚ûñ–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
‚ûñ–í –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.</b>''',parse_mode='HTML', reply_markup=keyboard)

	elif call.data == 'yes_buy_reklama':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		msg = bot.send_message(call.message.chat.id, '<b>‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏:</b>',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg, yes_buy_reklama)









bot.polling(True)
